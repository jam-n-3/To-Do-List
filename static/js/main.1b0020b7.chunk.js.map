{"version":3,"sources":["TODOList.js","App.js","reportWebVitals.js","index.js"],"names":["TODOList","props","startEditing","obj","setState","newVal","localStorage","getItem","editing","stopEditing","setItem","state","edit","event","target","value","cancelEdit","keyEdit","key","id","this","keys","map","className","onChange","onKeyDown","e","autoFocus","color","onClick","del","React","Component","App","sortKeys","length","lsArr","i","parseInt","srtArr","sort","a","b","sortedKeys","writeTODO","newTODO","submitTODO","Math","max","Object","toString","preventDefault","deleteTODO","removeItem","keySubmit","type","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b0020b7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport {MdCheck, MdClose, MdEdit} from \"react-icons/md\";\r\n\r\nclass TODOList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {editing: '', newVal: ''};\r\n    }\r\n\r\n    // these functions handle editing existing TODOs\r\n    startEditing = (obj) => {\r\n        this.setState({newVal: localStorage.getItem(obj)});\r\n        this.setState({editing: obj});\r\n    }\r\n\r\n    stopEditing = (obj) => {\r\n        localStorage.setItem(obj, this.state.newVal);\r\n        this.setState({editing: ''});\r\n    }\r\n\r\n    edit = (event) => this.setState({newVal: event.target.value});\r\n\r\n    cancelEdit = () => this.setState({editing: ''});\r\n\r\n    keyEdit = (event, obj) => {\r\n        if (event.key === 'Enter') {\r\n            this.stopEditing(obj);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={'list'}>\r\n                {this.props.keys.map((obj)=>(\r\n                    this.state.editing === obj ?\r\n                        <div className={'entry'}>\r\n                            <input className={'textEdit'} value={this.state.newVal} onChange={this.edit}\r\n                               onKeyDown={(e)=>this.keyEdit(e, obj)} autoFocus />\r\n                           <MdCheck className={'edit'} color={'green'} onClick={()=>this.stopEditing(obj)} />\r\n                           <MdClose className={'delete'} color={'red'} onClick={this.cancelEdit} />\r\n                        </div>\r\n                        :\r\n                        <div className={'entry'}>\r\n                            <p className={'text'}>{localStorage.getItem(obj)}</p>\r\n                            <MdEdit className={'edit'} color={'midnightblue'} onClick={()=>this.startEditing(obj)} />\r\n                            <MdClose className={'delete'} color={'red'} onClick={()=>this.props.del(obj)} />\r\n                        </div>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TODOList;\r\n","import React from 'react';\nimport './App.css';\nimport {MdAdd} from \"react-icons/md\";\nimport TODOList from \"./TODOList\";\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {newTODO: '', sortedKeys: []};\n    }\n\n    // ensures keys display in the order in which they were created\n    sortKeys = () => {\n        if (localStorage.length > 0) {\n            let lsArr = [];\n            for (let i=0; i<localStorage.length; i++) {\n                lsArr[i] = parseInt(localStorage.key(i));\n            }\n            let srtArr = lsArr.sort((a, b) => a - b);\n            this.setState({sortedKeys: srtArr});\n        }\n    }\n\n    // these three functions handle the appearing and disappearing of TODOs\n    writeTODO = (event) => this.setState({newTODO: event.target.value});\n\n    submitTODO = (event) => {\n        this.setState({newTODO: ''});\n        localStorage.length > 0 ?\n            localStorage.setItem((Math.max(...Object.keys(localStorage)) + 1).toString(), this.state.newTODO)\n        :\n            localStorage.setItem('0', this.state.newTODO);\n        event.preventDefault();\n        this.sortKeys();\n    }\n\n    deleteTODO = (key) => {\n        localStorage.removeItem(key);\n        this.sortKeys();\n    }\n\n    // this handy function checks if you submit by pressing the enter key\n    keySubmit = (event) => {\n        if (event.key === 'Enter') {\n            this.submitTODO(event);\n        }\n    }\n\n    // this sorts the keys on load\n    componentDidMount() {\n        this.sortKeys();\n    }\n\n    render() {\n        return (\n            <div id={'body'}>\n\n                <div id={'addBar'}>\n                    <input className={'textIn'} type={'text'} value={this.state.newTODO}\n                           onChange={this.writeTODO} placeholder={\"Add New 'To Do'\"} onKeyDown={this.keySubmit} />\n                    <div className={'addBox'}>\n                        <MdAdd className={'add'} color={'grey'} onClick={this.submitTODO} />\n                    </div>\n                </div>\n\n                <div id={'heading'}>\n                    <p>TO DO LIST</p>\n                </div>\n\n                <TODOList keys={this.state.sortedKeys} del={this.deleteTODO} />\n\n                <span className={'bottom'} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}